services:

  movies_admin:
    build: ./movies_admin
    container_name: movies_admin
    env_file:
      - .env
    ports:
      - "8001:8000"
    depends_on:
      - db
    volumes:
      - static_data:/vol/web

  fastapi:
    build: .
    command: bash -c "uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload"
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      - es
      - cache

  file_api:
    container_name: file_api
    build: ./file_api
    volumes:
      - .:/file_api
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      - minio
      - db

  nginx:
    image: nginx:${NGINX_TAG}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - static_data:/data
    env_file:
      - .env
    ports:
      - "80:80"
    depends_on:
      - movies_admin

  db:
    image: postgres:${POSTGRES_TAG}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data/
      - ./postgres_to_es/backup.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 3s
      retries: 3

  es:
    image: elasticsearch:${ELASTICSEARCH_TAG}
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:9200/" ]
      interval: 5s
      timeout: 10s
      retries: 10

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_storage:/data
    command: server --console-address ":9001" /data

  cache:
    image: redis:${REDIS_TAG}
    ports:
      - "6379:6379"

  etl:
    build: ./postgres_to_es
    env_file:
      - .env
    depends_on:
      es:
        condition: service_healthy
      db:
        condition: service_healthy

volumes:
  pg_data:
  static_data:
  es_data:
  minio_storage: